apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.mysql.name }}
  namespace: {{ .Values.mysql.namespace }}
  labels:
    app: {{ .Values.mysql.name }}
    app.kubernetes.io/name: {{ .Values.mysql.name }}
    app.kubernetes.io/part-of: {{ .Chart.Name }}
  annotations:
    {{- if .Values.argo.syncWaves.enabled }}argocd.argoproj.io/sync-wave: "{{ .Values.argo.syncWaves.workloads }}"{{- end }}
spec:
  serviceName: {{ .Values.mysql.service.name }}-headless
  replicas: {{ .Values.mysql.replicas | default 1 }}
  podManagementPolicy: OrderedReady
  selector:
    matchLabels:
      app: {{ .Values.mysql.name }}
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ .Values.mysql.name }}
        app.kubernetes.io/name: {{ .Values.mysql.name }}
        app.kubernetes.io/part-of: {{ .Chart.Name }}
    spec:
      terminationGracePeriodSeconds: 60

{{- if .Values.mysql.podSecurityContext }}
      securityContext:
{{ toYaml .Values.mysql.podSecurityContext | indent 8 }}
{{- end }}

{{- if or .Values.mysql.scheduling.nodeSelector .Values.mysql.scheduling.capacityType }}
      nodeSelector:
{{- if .Values.mysql.scheduling.nodeSelector }}
{{ toYaml .Values.mysql.scheduling.nodeSelector | indent 8 }}
{{- end }}
{{- if .Values.mysql.scheduling.capacityType }}
        karpenter.sh/capacity-type: {{ .Values.mysql.scheduling.capacityType | quote }}
{{- end }}
{{- end }}

{{- if .Values.mysql.scheduling.tolerations }}
      tolerations:
{{ toYaml .Values.mysql.scheduling.tolerations | indent 8 }}
{{- end }}

{{- if and .Values.mysql.scheduling.topologySpread.enabled .Values.mysql.scheduling.topologySpread.constraints }}
      topologySpreadConstraints:
{{ toYaml .Values.mysql.scheduling.topologySpread.constraints | indent 8 }}
{{- end }}

      containers:
        - name: {{ .Values.mysql.name }}
          image: "{{ .Values.mysql.image.repository }}:{{ .Values.mysql.image.tag }}"
          imagePullPolicy: {{ .Values.mysql.image.pullPolicy }}
          ports:
            - name: mysql
              containerPort: {{ .Values.mysql.containerPort }}
          args:
{{- range .Values.mysql.extraArgs }}
            - "{{ . }}"
{{- end }}
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mysql.secretName }}
                  key: MYSQL_ROOT_PASSWORD
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mysql.secretName }}
                  key: MYSQL_DATABASE
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mysql.secretName }}
                  key: MYSQL_USER
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.mysql.secretName }}
                  key: MYSQL_PASSWORD
          resources:
{{ toYaml .Values.mysql.resources | indent 12 }}

          startupProbe:
            exec:
              command: ["sh", "-c", "mysqladmin ping -h 127.0.0.1 -uroot -p\"$MYSQL_ROOT_PASSWORD\" || exit 1"]
            periodSeconds: {{ .Values.mysql.probes.startup.periodSeconds }}
            failureThreshold: {{ .Values.mysql.probes.startup.failureThreshold }}

          readinessProbe:
            exec:
              command: ["sh", "-c", "mysqladmin ping -h 127.0.0.1 -uroot -p\"$MYSQL_ROOT_PASSWORD\" || exit 1"]
            initialDelaySeconds: {{ .Values.mysql.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.mysql.probes.readiness.periodSeconds }}
            failureThreshold: {{ .Values.mysql.probes.readiness.failureThreshold }}

          livenessProbe:
            exec:
              command: ["sh", "-c", "mysqladmin ping -h 127.0.0.1 -uroot -p\"$MYSQL_ROOT_PASSWORD\" || exit 1"]
            initialDelaySeconds: {{ .Values.mysql.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.mysql.probes.liveness.periodSeconds }}
            failureThreshold: {{ .Values.mysql.probes.liveness.failureThreshold }}

          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql

      {{- if or .Values.mysql.existingClaim (not .Values.mysql.persistence.enabled) }}
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: {{ .Values.mysql.existingClaim | default .Values.mysql.pvcName }}
      {{- end }}

  {{- if and (not .Values.mysql.existingClaim) .Values.mysql.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: {{ toYaml .Values.mysql.persistence.accessModes | nindent 10 }}
        storageClassName: {{ .Values.mysql.persistence.storageClassName | quote }}
        resources:
          requests:
            storage: {{ .Values.mysql.persistence.size | quote }}
  {{- end }}
