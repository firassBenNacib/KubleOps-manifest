backend:
  namespace: backend
  name: backend
  serviceAccountName: backend-service-account
  irsaRoleArn: ""
  image:
    repository: 392159838427.dkr.ecr.us-east-1.amazonaws.com/backend
    tag: "160"
    pullPolicy: Always
  imagePullSecrets: []
  replicas: 2
  containerPort: 8088
  service:
    name: backend-service
    type: ClusterIP
    port: 80
    targetPort: 8088
  resources:
    requests:
      memory: "256Mi"
      cpu: "200m"
    limits:
      memory: "512Mi"
      cpu: "500m"
  probes:
    startup:
      path: /springMVC/actuator/health/liveness
      port: 8088
      periodSeconds: 10
      timeoutSeconds: 2
      failureThreshold: 36
    liveness:
      path: /springMVC/actuator/health/liveness
      port: 8088
      initialDelaySeconds: 10
      periodSeconds: 15
      timeoutSeconds: 2
      failureThreshold: 3
    readiness:
      path: /springMVC/actuator/health/readiness
      port: 8088
      initialDelaySeconds: 40
      periodSeconds: 5
      timeoutSeconds: 2
      failureThreshold: 6
  configMapName: backend-config
  secretName: db-credentials
  configMapData:
    SPRING_DATASOURCE_URL: jdbc:mysql://mysql.database.svc.cluster.local:3306/VaccinationApp?useSSL=false&serverTimezone=UTC&allowPublicKeyRetrieval=true
  scheduling:
    capacityType: "on-demand"
    nodeSelector:
      workload-tier: backend
    tolerations:
      - key: "tier"
        operator: "Equal"
        value: "backend"
        effect: "NoSchedule"
      - key: "capacity"
        operator: "Equal"
        value: "ondemand"
        effect: "NoSchedule"
    topologySpread:
      enabled: true
      constraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app: backend
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app: backend
frontend:
  namespace: frontend
  name: frontend
  serviceAccountName: frontend-service-account
  irsaRoleArn: ""
  image:
    repository: 392159838427.dkr.ecr.us-east-1.amazonaws.com/frontend
    tag: "159"
    pullPolicy: Always
  imagePullSecrets: []
  replicas: 1
  containerPort: 8080
  service:
    name: frontend-service
    type: ClusterIP
    port: 80
    targetPort: 8080
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "250m"
  probes:
    liveness:
      path: /
      port: 8080
      initialDelaySeconds: 15
      periodSeconds: 15
    readiness:
      path: /
      port: 8080
      initialDelaySeconds: 5
      periodSeconds: 10
  securityContext:
    allowPrivilegeEscalation: false
    readOnlyRootFilesystem: true
    capabilities:
      drop: ["ALL"]
  scheduling:
    nodeSelector:
      workload-tier: frontend
    tolerations:
      - key: "tier"
        operator: "Equal"
        value: "frontend"
        effect: "NoSchedule"
      - key: "capacity"
        operator: "Equal"
        value: "spot"
        effect: "NoSchedule"
      - key: "capacity"
        operator: "Equal"
        value: "ondemand"
        effect: "NoSchedule"
    topologySpread:
      enabled: true
      constraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app: frontend
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app: frontend
mysql:
  namespace: database
  name: mysql
  image:
    repository: mysql
    tag: "8.0"
    pullPolicy: IfNotPresent
  containerPort: 3306
  replicas: 1
  secretName: mysql-secret
  service:
    name: mysql
    type: ClusterIP
    port: 3306
    targetPort: 3306
  resources:
    requests:
      memory: "512Mi"
      cpu: "250m"
    limits:
      memory: "1Gi"
      cpu: "500m"
  persistence:
    enabled: true
    storageClassName: gp3-wffc
    accessModes: ["ReadWriteOnce"]
    size: 10Gi
  existingClaim: ""
  pvcName: mysql-pvc
  podSecurityContext:
    fsGroup: 999
    fsGroupChangePolicy: "OnRootMismatch"
  extraArgs: []
  probes:
    startup:
      periodSeconds: 5
      failureThreshold: 60
    readiness:
      initialDelaySeconds: 10
      periodSeconds: 10
      failureThreshold: 6
    liveness:
      initialDelaySeconds: 30
      periodSeconds: 20
      failureThreshold: 3
  storageClass:
    createDefault: true
  scheduling:
    capacityType: "on-demand"
    nodeSelector:
      workload-tier: backend
    tolerations:
      - key: "tier"
        operator: "Equal"
        value: "backend"
        effect: "NoSchedule"
      - key: "capacity"
        operator: "Equal"
        value: "ondemand"
        effect: "NoSchedule"
    topologySpread:
      enabled: true
      constraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app: mysql
        - maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
          labelSelector:
            matchLabels:
              app: mysql
ingress:
  enabled: true
  groupName: kubleops-public
  certificateArn: ""
  hosts:
    backend: api.devops.firasbennacib.com
    frontend: app.devops.firasbennacib.com
  externalDNS: true
  sslRedirect: true
  sslPolicy: ELBSecurityPolicy-TLS13-1-2-2021-06
  loadBalancerName: "kubleops-public-alb"
  ipAddressType: ipv4
podSecurity:
  backend: restricted
  frontend: restricted
  database: baseline
pdb:
  enabled: true
  backend:
    minAvailable: 1
  frontend:
    maxUnavailable: 1
  mysql:
    maxUnavailable: 1
hpa:
  enabled: true
  backend:
    enabled: true
    minReplicas: 2
    maxReplicas: 8
    cpu:
      averageUtilization: 60
    memory:
      averageUtilization: 70
      enabled: false
    behavior:
      scaleUp:
        stabilizationWindowSeconds: 60
        selectPolicy: Max
        policies:
          - type: Percent
            value: 100
            periodSeconds: 60
          - type: Pods
            value: 2
            periodSeconds: 60
      scaleDown:
        stabilizationWindowSeconds: 300
        selectPolicy: Min
        policies:
          - type: Percent
            value: 30
            periodSeconds: 60
          - type: Pods
            value: 1
            periodSeconds: 60
  frontend:
    enabled: true
    minReplicas: 1
    maxReplicas: 6
    cpu:
      averageUtilization: 50
    memory:
      averageUtilization: 70
      enabled: false
    behavior:
      scaleUp:
        stabilizationWindowSeconds: 60
        selectPolicy: Max
        policies:
          - type: Percent
            value: 100
            periodSeconds: 60
          - type: Pods
            value: 1
            periodSeconds: 60
      scaleDown:
        stabilizationWindowSeconds: 300
        selectPolicy: Min
        policies:
          - type: Percent
            value: 30
            periodSeconds: 60
          - type: Pods
            value: 1
            periodSeconds: 60
networkPolicy:
  enabled: true
  vpcCidrs: []
  dnsNamespace: kube-system
  dnsPodLabelKey: k8s-app
  dnsPodLabelValue: kube-dns
karpenter:
  clusterName: "KubleOps"
  nodeRoleArn: ""
  zones: ["us-east-1a", "us-east-1b"]
argo:
  syncWaves:
    enabled: false
    namespaces: "-1"
    config: "0"
    services: "1"
    networkPolicies: "1"
    workloads: "2"
    hpa: "3"
    pdb: "3"
    ingress: "4"
